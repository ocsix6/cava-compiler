
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cava;

import cava.Taula_de_simbols.DFuncio;
import cava.Taula_de_simbols.DParametre;
import cava.Taula_de_simbols.DProcediment;
import cava.Taula_de_simbols.TaulaDeSimbols;
import java_cup.runtime.*;
import cava.Taula_de_simbols.DTipus;
import cava.Taula_de_simbols.TSB;
import java.io.BufferedWriter;
import java.io.FileWriter;
import cava.genc3a.Generador;
import cava.genc3a.Subprograma;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\004\000" +
    "\002\006\004\000\002\006\005\000\002\007\006\000\002" +
    "\007\006\000\002\012\004\000\002\013\005\000\002\013" +
    "\006\000\002\014\006\000\002\014\006\000\002\015\005" +
    "\000\002\015\010\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\006\000\002\036\002\000\002" +
    "\016\005\000\002\016\004\000\002\016\002\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\004\000\002\020\006\000\002\021\010\000" +
    "\002\021\013\000\002\040\002\000\002\022\011\000\002" +
    "\023\005\000\002\024\006\000\002\024\003\000\002\037" +
    "\002\000\002\025\006\000\002\025\003\000\002\026\005" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\030\005\000\002\030\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\006\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\004\000\002" +
    "\032\005\000\002\033\003\000\002\034\004\000\002\034" +
    "\005\000\002\035\005\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\014\006\004\007\013\014\023\032\021\041" +
    "\015\001\002\000\004\032\uffed\001\002\000\004\010\uffe9" +
    "\001\002\000\004\002\202\001\002\000\004\002\000\001" +
    "\002\000\016\002\ufffa\006\ufffa\007\ufffa\014\ufffa\032\ufffa" +
    "\041\ufffa\001\002\000\004\010\uffe9\001\002\000\016\002" +
    "\ufffc\006\ufffc\007\ufffc\014\ufffc\032\ufffc\041\ufffc\001\002" +
    "\000\004\032\uffec\001\002\000\016\002\ufffd\006\ufffd\007" +
    "\ufffd\014\ufffd\032\ufffd\041\ufffd\001\002\000\004\032\uffeb" +
    "\001\002\000\016\002\ufffb\006\ufffb\007\ufffb\014\ufffb\032" +
    "\ufffb\041\ufffb\001\002\000\004\032\121\001\002\000\016" +
    "\002\uffff\006\004\007\013\014\023\032\021\041\015\001" +
    "\002\000\006\004\112\015\111\001\002\000\006\005\106" +
    "\012\105\001\002\000\010\006\004\007\013\041\015\001" +
    "\002\000\004\032\025\001\002\000\004\015\026\001\002" +
    "\000\020\004\042\027\041\030\030\031\036\032\037\042" +
    "\033\043\027\001\002\000\036\005\uffc6\012\uffc6\013\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\040\uffc6\001\002\000\036" +
    "\005\uffc4\012\uffc4\013\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\040\uffc4\001\002\000\034\005\uffd4\013\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\067\027\066\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\040\uffd4\001\002\000\006\005\103\012" +
    "\102\001\002\000\036\005\uffc5\012\uffc5\013\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\040\uffc5\001\002\000\020\013\101" +
    "\024\063\025\057\033\060\034\064\035\061\036\062\001" +
    "\002\000\036\005\uffc0\012\uffc0\013\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\040\uffc0\001\002\000\036\005\uffc3\012\uffc3" +
    "\013\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\040\uffc3\001\002" +
    "\000\042\004\073\005\uffc8\012\uffc8\013\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\074\040\uffc8\001\002\000\034\005" +
    "\uffcc\013\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc\001" +
    "\002\000\020\004\042\027\041\030\030\031\036\032\037" +
    "\042\033\043\027\001\002\000\020\004\042\027\041\030" +
    "\030\031\036\032\037\042\033\043\027\001\002\000\036" +
    "\005\uffc9\012\uffc9\013\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\040\uffc9\001\002\000\014\005\uffd9\013\uffd9\022\uffd9\023" +
    "\053\040\uffd9\001\002\000\030\005\uffd6\013\uffd6\022\uffd6" +
    "\023\uffd6\024\063\025\057\033\060\034\064\035\061\036" +
    "\062\040\uffd6\001\002\000\006\005\047\022\050\001\002" +
    "\000\036\005\uffc1\012\uffc1\013\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\040\uffc1\001\002\000\020\004\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\042\uffd8\043\uffd8\001\002\000\020" +
    "\004\042\027\041\030\030\031\036\032\037\042\033\043" +
    "\027\001\002\000\014\005\uffda\013\uffda\022\uffda\023\053" +
    "\040\uffda\001\002\000\020\004\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\042\uffd8\043\uffd8\001\002\000\020\004\042" +
    "\027\041\030\030\031\036\032\037\042\033\043\027\001" +
    "\002\000\030\005\uffd7\013\uffd7\022\uffd7\023\uffd7\024\063" +
    "\025\057\033\060\034\064\035\061\036\062\040\uffd7\001" +
    "\002\000\020\004\042\027\041\030\030\031\036\032\037" +
    "\042\033\043\027\001\002\000\020\004\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\042\uffd2\043\uffd2\001\002\000\020" +
    "\004\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\042\uffd1\043" +
    "\uffd1\001\002\000\020\004\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\042\uffcf\043\uffcf\001\002\000\020\004\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\042\uffce\043\uffce\001\002" +
    "\000\020\004\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\042" +
    "\uffd3\043\uffd3\001\002\000\020\004\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\042\uffd0\043\uffd0\001\002\000\034\005" +
    "\uffd5\013\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\067" +
    "\027\066\033\uffd5\034\uffd5\035\uffd5\036\uffd5\040\uffd5\001" +
    "\002\000\020\004\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\042\uffca\043\uffca\001\002\000\020\004\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\042\uffcb\043\uffcb\001\002\000\020" +
    "\004\042\027\041\030\030\031\036\032\037\042\033\043" +
    "\027\001\002\000\034\005\uffcd\013\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\040\uffcd\001\002\000\036\005\uffc2\012\uffc2" +
    "\013\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\040\uffc2\001\002" +
    "\000\022\004\042\005\077\027\041\030\030\031\036\032" +
    "\037\042\033\043\027\001\002\000\020\004\042\027\041" +
    "\030\030\031\036\032\037\042\033\043\027\001\002\000" +
    "\006\022\050\040\076\001\002\000\036\005\uffc7\012\uffc7" +
    "\013\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7\001\002" +
    "\000\036\005\uffbe\012\uffbe\013\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\040\uffbe\001\002\000\006\005\uffbd\012\uffbd\001" +
    "\002\000\026\002\uffee\006\uffee\007\uffee\011\uffee\014\uffee" +
    "\016\uffee\020\uffee\021\uffee\032\uffee\041\uffee\001\002\000" +
    "\020\004\042\027\041\030\030\031\036\032\037\042\033" +
    "\043\027\001\002\000\036\005\uffbf\012\uffbf\013\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\040\uffbf\001\002\000\006\005" +
    "\uffbc\012\uffbc\001\002\000\010\006\004\007\013\041\015" +
    "\001\002\000\004\010\ufff8\001\002\000\004\032\110\001" +
    "\002\000\006\005\ufff5\012\ufff5\001\002\000\020\004\042" +
    "\027\041\030\030\031\036\032\037\042\033\043\027\001" +
    "\002\000\012\005\113\006\004\007\013\041\015\001\002" +
    "\000\004\010\ufff7\001\002\000\004\032\115\001\002\000" +
    "\006\005\ufff6\012\ufff6\001\002\000\006\013\117\022\050" +
    "\001\002\000\026\002\uffe0\006\uffe0\007\uffe0\011\uffe0\014" +
    "\uffe0\016\uffe0\020\uffe0\021\uffe0\032\uffe0\041\uffe0\001\002" +
    "\000\004\002\ufffe\001\002\000\006\004\130\013\127\001" +
    "\002\000\006\005\124\012\123\001\002\000\010\006\004" +
    "\007\013\041\015\001\002\000\004\010\ufff3\001\002\000" +
    "\004\032\126\001\002\000\006\005\ufff0\012\ufff0\001\002" +
    "\000\026\002\uffef\006\uffef\007\uffef\011\uffef\014\uffef\016" +
    "\uffef\020\uffef\021\uffef\032\uffef\041\uffef\001\002\000\012" +
    "\005\131\006\004\007\013\041\015\001\002\000\004\010" +
    "\ufff2\001\002\000\004\032\133\001\002\000\006\005\ufff1" +
    "\012\ufff1\001\002\000\004\010\136\001\002\000\016\002" +
    "\ufff9\006\ufff9\007\ufff9\014\ufff9\032\ufff9\041\ufff9\001\002" +
    "\000\024\006\004\007\013\011\uffe6\014\023\016\144\020" +
    "\141\021\142\032\145\041\015\001\002\000\004\013\201" +
    "\001\002\000\024\006\uffe4\007\uffe4\011\uffe4\014\uffe4\016" +
    "\uffe4\020\uffe4\021\uffe4\032\uffe4\041\uffe4\001\002\000\004" +
    "\004\173\001\002\000\020\004\042\027\041\030\030\031" +
    "\036\032\037\042\033\043\027\001\002\000\024\006\004" +
    "\007\013\011\uffe6\014\023\016\144\020\141\021\142\032" +
    "\145\041\015\001\002\000\004\004\160\001\002\000\006" +
    "\004\073\015\111\001\002\000\024\006\uffd8\007\uffd8\011" +
    "\uffd8\014\uffd8\016\uffd8\020\uffd8\021\uffd8\032\uffd8\041\uffd8" +
    "\001\002\000\024\006\uffe3\007\uffe3\011\uffe3\014\uffe3\016" +
    "\uffe3\020\uffe3\021\uffe3\032\uffe3\041\uffe3\001\002\000\004" +
    "\011\155\001\002\000\004\032\154\001\002\000\024\006" +
    "\uffe5\007\uffe5\011\uffe5\014\uffe5\016\uffe5\020\uffe5\021\uffe5" +
    "\032\uffe5\041\uffe5\001\002\000\024\006\uffe2\007\uffe2\011" +
    "\uffe2\014\uffe2\016\uffe2\020\uffe2\021\uffe2\032\uffe2\041\uffe2" +
    "\001\002\000\004\013\127\001\002\000\030\002\uffea\006" +
    "\uffea\007\uffea\011\uffea\014\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\032\uffea\041\uffea\001\002\000\024\006\004\007" +
    "\013\011\uffe6\014\023\016\144\020\141\021\142\032\145" +
    "\041\015\001\002\000\004\011\uffe8\001\002\000\020\004" +
    "\042\027\041\030\030\031\036\032\037\042\033\043\027" +
    "\001\002\000\006\005\162\022\050\001\002\000\004\010" +
    "\uffd8\001\002\000\004\010\uffe9\001\002\000\026\006\uffdf" +
    "\007\uffdf\011\uffdf\014\uffdf\016\uffdf\017\165\020\uffdf\021" +
    "\uffdf\032\uffdf\041\uffdf\001\002\000\004\010\uffdd\001\002" +
    "\000\004\010\uffe9\001\002\000\024\006\uffde\007\uffde\011" +
    "\uffde\014\uffde\016\uffde\020\uffde\021\uffde\032\uffde\041\uffde" +
    "\001\002\000\004\011\uffe7\001\002\000\020\013\172\024" +
    "\063\025\057\033\060\034\064\035\061\036\062\001\002" +
    "\000\024\006\uffdb\007\uffdb\011\uffdb\014\uffdb\016\uffdb\020" +
    "\uffdb\021\uffdb\032\uffdb\041\uffdb\001\002\000\020\004\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\042\uffd8\043\uffd8\001" +
    "\002\000\020\004\042\027\041\030\030\031\036\032\037" +
    "\042\033\043\027\001\002\000\006\005\176\022\050\001" +
    "\002\000\004\010\uffd8\001\002\000\004\010\uffe9\001\002" +
    "\000\024\006\uffdc\007\uffdc\011\uffdc\014\uffdc\016\uffdc\020" +
    "\uffdc\021\uffdc\032\uffdc\041\uffdc\001\002\000\024\006\uffe1" +
    "\007\uffe1\011\uffe1\014\uffe1\016\uffe1\020\uffe1\021\uffe1\032" +
    "\uffe1\041\uffe1\001\002\000\004\002\001\001\002\000\016" +
    "\002\ufff4\006\ufff4\007\ufff4\014\ufff4\032\ufff4\041\ufff4\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\030\002\005\003\006\004\017\005\013\006" +
    "\010\007\021\010\016\012\011\013\004\015\015\020\007" +
    "\001\001\000\002\001\001\000\006\011\202\036\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\134\036\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\121\001\001\000\026\003\117\004" +
    "\017\005\013\006\010\007\021\010\016\012\011\013\004" +
    "\015\015\020\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\026\033\030\030\032\037\033\042\034" +
    "\034\035\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\032" +
    "\071\033\042\034\034\035\031\001\001\000\022\024\045" +
    "\025\043\026\044\030\030\032\037\033\042\034\034\035" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\050\001\001\000\020\025\051\026\044\030\030" +
    "\032\037\033\042\034\034\035\031\001\001\000\002\001" +
    "\001\000\004\037\053\001\001\000\016\026\054\030\030" +
    "\032\037\033\042\034\034\035\031\001\001\000\004\027" +
    "\055\001\001\000\014\030\064\032\037\033\042\034\034" +
    "\035\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\032\070\033\042\034\034\035\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\032" +
    "\077\033\042\034\034\035\031\001\001\000\022\024\074" +
    "\025\043\026\044\030\030\032\037\033\042\034\034\035" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\032" +
    "\103\033\042\034\034\035\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\024\115" +
    "\025\043\026\044\030\030\032\037\033\042\034\034\035" +
    "\031\001\001\000\004\010\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\010\150\015\142\016\147\017\145\020\151\021\137\022" +
    "\146\023\152\033\136\034\034\035\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\026" +
    "\170\030\030\032\037\033\042\034\034\035\031\001\001" +
    "\000\030\010\150\015\142\016\167\017\145\020\151\021" +
    "\137\022\146\023\152\033\136\034\034\035\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\010\150\015\142\016\156\017\145" +
    "\020\151\021\137\022\146\023\152\033\136\034\034\035" +
    "\031\001\001\000\002\001\001\000\022\024\160\025\043" +
    "\026\044\030\030\032\037\033\042\034\034\035\031\001" +
    "\001\000\002\001\001\000\004\037\162\001\001\000\006" +
    "\011\163\036\133\001\001\000\002\001\001\000\004\040" +
    "\165\001\001\000\006\011\166\036\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\055\001\001\000" +
    "\002\001\001\000\004\037\173\001\001\000\022\024\174" +
    "\025\043\026\044\030\030\032\037\033\042\034\034\035" +
    "\031\001\001\000\002\001\001\000\004\037\176\001\001" +
    "\000\006\011\177\036\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol n = scanner.next_token();
    bw.write(n.toString()+"\n");
    return n;

    }


private Scanner scanner;
public TaulaDeSimbols TS = new TaulaDeSimbols();
Graphwiz archiuArbre;
public Generador gen = new Generador();

FileWriter fw;
BufferedWriter bw;
public Parser(Scanner scanner) {
this.scanner = scanner;
try {
TS.afegirTSBs("int",new DTipus(TSB.INTEGER));
     TS.afegirTSBs("boolean", new DTipus(TSB.BOOLEAN));
     TS.afegirTSBs("string", new DTipus(TSB.STRING));

     Subprograma sub = gen.nouSubprograma("printint", gen.novaEtiqueta("printint"), true);
     Subprograma sub1 = gen.nouSubprograma("printstring", gen.novaEtiqueta("printstring"), true);
     Subprograma sub2 = gen.nouSubprograma("readstring", gen.novaEtiqueta("readstring"), true);
     Subprograma sub3 = gen.nouSubprograma("readint", gen.novaEtiqueta("readint"), false);
     TS.afegir("printInt", new DProcediment(sub)); // PrintInt
     TS.afegir("printString", new DProcediment(sub1)); // Println
     TS.afegir("readString", new DProcediment(sub2)); //readString
     TS.afegir("readInt", new DFuncio("int", sub3));

     DParametre dpint = new DParametre("i","int", DParametre.argtipus.IN);
     gen.entraSubPrograma(sub);
     sub.afegirParam(gen.novaVariable(TSB.INTEGER, true));
     gen.surtSubPrograma();
     TS.posarParam("printInt", "i", dpint);

     DParametre dpstring = new DParametre("s","string", DParametre.argtipus.IN);
     gen.entraSubPrograma(sub1);
     sub1.afegirParam(gen.novaVariable(TSB.STRING, true));
     gen.surtSubPrograma();
     TS.posarParam("printString", "s", dpstring);

     DParametre dpreadString = new DParametre("f","string", DParametre.argtipus.IN);
     gen.entraSubPrograma(sub2);
     dpreadString.variable = gen.novaVariable(TSB.STRING, true);
     sub2.afegirParam(dpreadString.variable);
     gen.surtSubPrograma();
     TS.posarParam("readString", "f", dpreadString);

     //Un readInt no té paràmetres ja que retorna un integer


     archiuArbre = new Graphwiz();
     fw=new FileWriter("tokens.txt");
     bw=new BufferedWriter(fw);
 } catch (Exception ex) {
     //Logger.getLogger(Parser.class.getName()).log(Level.SEVERE, null, ex);
 }
    }
    public class ErrSintactic extends Exception {

        public ErrSintactic() {
            super("Hi ha un error sintàctic");
        }
    }

    public void syntax_error(Symbol s){

    }

    public void unrecovered_syntax_error(Symbol s) throws
    java.lang.Exception {
        throw new ErrSintactic();
      //report_fatal_error("", null);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolPrograma start_val = (SymbolPrograma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= LLISTDECLARACIONS 
            {
              SymbolPrograma RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolLlistaDecl v1 = (SymbolLlistaDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolPrograma(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LLISTDECLARACIONS ::= DECLARACIO 
            {
              SymbolLlistaDecl RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDec v1 = (SymbolDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLlistaDecl(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLISTDECLARACIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LLISTDECLARACIONS ::= DECLARACIO LLISTDECLARACIONS 
            {
              SymbolLlistaDecl RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolDec v1 = (SymbolDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolLlistaDecl v2 = (SymbolLlistaDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLlistaDecl(this.parser,v1,v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLISTDECLARACIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIO ::= PROCEDURE 
            {
              SymbolDec RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolProc v1 = (SymbolProc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDec(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIO ::= FUNCIO 
            {
              SymbolDec RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFunc v1 = (SymbolFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDec(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIO ::= VARIABLE 
            {
              SymbolDec RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDec(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIO ::= ASSIG 
            {
              SymbolDec RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAssig v1 = (SymbolAssig)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDec(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDURE ::= FUNCPROC COS 
            {
              SymbolProc RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFunProc v1 = (SymbolFunProc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCos v2 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolProc(this.parser,v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCPROC ::= FUNCPROCCAP RPAREN 
            {
              SymbolFunProc RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFunProcAp v = (SymbolFunProcAp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFunProc(this.parser,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCPROC",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCPROC ::= ID LPAREN RPAREN 
            {
              SymbolFunProc RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolFunProc(this.parser,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCPROC",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCPROCCAP ::= ID LPAREN TIPUSVAR ID 
            {
              SymbolFunProcAp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolTipusVar v1 = (SymbolTipusVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolFunProcAp(this.parser,v,v1,v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCPROCCAP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCPROCCAP ::= FUNCPROCCAP COMA TIPUSVAR ID 
            {
              SymbolFunProcAp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolFunProcAp v = (SymbolFunProcAp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolTipusVar v1 = (SymbolTipusVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolFunProcAp(this.parser,v,v1,v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCPROCCAP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIO ::= FUNCFUN COS 
            {
              SymbolFunc RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFuncFun v = (SymbolFuncFun)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCos v1 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolFunc(this.parser,v,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCFUN ::= TIPUSVAR FUNCFUNCAP RPAREN 
            {
              SymbolFuncFun RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolTipusVar v = (SymbolTipusVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFunFuncap v1 = (SymbolFunFuncap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFuncFun(this.parser,v,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCFUN",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCFUN ::= TIPUSVAR ID LPAREN RPAREN 
            {
              SymbolFuncFun RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolTipusVar v = (SymbolTipusVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolFuncFun(this.parser,v,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCFUN",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCFUNCAP ::= ID LPAREN TIPUSVAR ID 
            {
              SymbolFunFuncap RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolTipusVar v1 = (SymbolTipusVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolFunFuncap(this.parser,v,v1,v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCFUNCAP",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCFUNCAP ::= FUNCFUNCAP COMA TIPUSVAR ID 
            {
              SymbolFunFuncap RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolFunFuncap v = (SymbolFunFuncap)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolTipusVar v1 = (SymbolTipusVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolFunFuncap(this.parser,v,v1,v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCFUNCAP",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIABLE ::= TIPUSVAR ID PCOMA 
            {
              SymbolVar RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolTipusVar v1 = (SymbolTipusVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolVar(this.parser,v1,v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIABLE ::= CONST TIPUSVAR ID IGUAL EXPRESIOREL PCOMA 
            {
              SymbolVar RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolTipusVar v1 = (SymbolTipusVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpRel v3 = (SymbolExpRel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolVar(this.parser,v1,v2,v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPUSVAR ::= INT 
            {
              SymbolTipusVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipusVar(this.parser,"int"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUSVAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPUSVAR ::= BOOLEAN 
            {
              SymbolTipusVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipusVar(this.parser,"boolean"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUSVAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPUSVAR ::= STRING 
            {
              SymbolTipusVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipusVar(this.parser,"string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUSVAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COS ::= A LCOR DEC RCOR 
            {
              SymbolCos RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolDecl v1 = (SymbolDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolCos(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // A ::= 
            {
              SymbolA RESULT =null;
		 RESULT = new SymbolA(this.parser); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEC ::= INSTR M DEC 
            {
              SymbolDecl RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolInstr v1 = (SymbolInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		M v3 = (M)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecl v2 = (SymbolDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecl(this.parser,v1,v2,v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEC ::= VARIABLE DEC 
            {
              SymbolDecl RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecl v2 = (SymbolDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecl(this.parser,v1,v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEC ::= 
            {
              SymbolDecl RESULT =null;
		 RESULT = new SymbolDecl(this.parser); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTR ::= ASSIG 
            {
              SymbolInstr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAssig v1 = (SymbolAssig)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTR ::= INSTRIF 
            {
              SymbolInstr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIf v1 = (SymbolIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTR ::= INSTRWHILE 
            {
              SymbolInstr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolWhile v1 = (SymbolWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTR ::= INSTRETURN 
            {
              SymbolInstr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolReturn v1 = (SymbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTR ::= CRIDADA PCOMA 
            {
              SymbolInstr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolCridada v1 = (SymbolCridada)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASSIG ::= ID IGUAL EXPRESIO PCOMA 
            {
              SymbolAssig RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExp v1 = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolAssig(this.parser,v,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIG",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRIF ::= IF LPAREN EXPRESIO RPAREN M COS 
            {
              SymbolIf RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolExp v1 = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		M v3 = (M)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCos v2 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolIf(this.parser,v1,v2,v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRIF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRIF ::= IF LPAREN EXPRESIO RPAREN M COS ELSE M1 COS 
            {
              SymbolIf RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolExp v1 = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		M v4 = (M)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolCos v2 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		M1 v5 = (M1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCos v3 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolIf(this.parser,v1,v2,v3,v4,v5); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRIF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // M1 ::= 
            {
              M1 RESULT =null;
		 RESULT = new M1(this.parser); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRWHILE ::= WHILE LPAREN M EXPRESIO RPAREN M COS 
            {
              SymbolWhile RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		M v3 = (M)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolExp v1 = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		M v4 = (M)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCos v2 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolWhile(this.parser,v1,v2,v3,v4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRWHILE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRETURN ::= RETURN EXPRESIOREL PCOMA 
            {
              SymbolReturn RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpRel v1 = (SymbolExpRel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolReturn(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRETURN",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESIO ::= EXPRESIO OR M EXPRESIOAND 
            {
              SymbolExp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolExp v1 = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		M v3 = (M)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpAnd v2 = (SymbolExpAnd)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExp(this.parser,v1,v2,v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESIO ::= EXPRESIOAND 
            {
              SymbolExp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpAnd v1 = (SymbolExpAnd)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExp(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // M ::= 
            {
              M RESULT =null;
		 RESULT = new M(this.parser); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESIOAND ::= EXPRESIOAND AND M EXPRESIOREL 
            {
              SymbolExpAnd RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolExpAnd v1 = (SymbolExpAnd)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		M v3 = (M)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpRel v2 = (SymbolExpRel)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpAnd(this.parser,v1,v2,v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIOAND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESIOAND ::= EXPRESIOREL 
            {
              SymbolExpAnd RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpRel v1 = (SymbolExpRel)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpAnd(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIOAND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESIOREL ::= EXPRESIOREL OPREL EXPRESIOARIT 
            {
              SymbolExpRel RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpRel v1 = (SymbolExpRel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOpRel v2 = (SymbolOpRel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpArit v3 = (SymbolExpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpRel(this.parser,v1,v2,v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIOREL",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESIOREL ::= EXPRESIOARIT 
            {
              SymbolExpRel RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpArit v1 = (SymbolExpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpRel(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIOREL",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPREL ::= MENOR 
            {
              SymbolOpRel RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOpRel(this.parser,"<"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPREL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPREL ::= MAJOR 
            {
              SymbolOpRel RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOpRel(this.parser,">");     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPREL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPREL ::= IGUALIGUAL 
            {
              SymbolOpRel RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOpRel(this.parser,"==");    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPREL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPREL ::= MAJORIG 
            {
              SymbolOpRel RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOpRel(this.parser,">=");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPREL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPREL ::= MENORIG 
            {
              SymbolOpRel RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOpRel(this.parser,"<=");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPREL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPREL ::= NOTEQ 
            {
              SymbolOpRel RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOpRel(this.parser,"!=");    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPREL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESIOARIT ::= EXPRESIOARIT OPARIT TERME 
            {
              SymbolExpArit RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpArit v1 = (SymbolExpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOpArit v2 = (SymbolOpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolTerme v3 = (SymbolTerme)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpArit(this.parser,v1,v2,v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIOARIT",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESIOARIT ::= TERME 
            {
              SymbolExpArit RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolTerme v1 = (SymbolTerme)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpArit(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIOARIT",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPARIT ::= SUMA 
            {
              SymbolOpArit RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOpArit(this.parser, "+"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPARIT ::= RESTA 
            {
              SymbolOpArit RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOpArit(this.parser, "-"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TERME ::= CRIDADA 
            {
              SymbolTerme RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCridada v1 = (SymbolCridada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTerme(this.parser,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERME",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TERME ::= ID 
            {
              SymbolTerme RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTerme(this.parser,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERME",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TERME ::= ID LBRACKET EXPRESIO RBRACKET 
            {
              SymbolTerme RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExp v2 = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolTerme(this.parser,v,v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERME",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TERME ::= NUM 
            {
              SymbolTerme RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTerme(this.parser,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERME",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TERME ::= STRING_LITERAL 
            {
              SymbolTerme RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTerme(this.parser,v, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERME",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TERME ::= TRUE 
            {
              SymbolTerme RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTerme(this.parser,v, 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERME",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TERME ::= FALSE 
            {
              SymbolTerme RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTerme(this.parser,v, 2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERME",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TERME ::= RESTA TERME 
            {
              SymbolTerme RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolTerme v1 = (SymbolTerme)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTerme(this.parser,"-",v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERME",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TERME ::= LPAREN EXPRESIO RPAREN 
            {
              SymbolTerme RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExp v = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolTerme(this.parser, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERME",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CRIDADA ::= ARGS 
            {
              SymbolCridada RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArgs v = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolCridada(this.parser,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRIDADA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARGS ::= LLISTARG RPAREN 
            {
              SymbolArgs RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolLlistaArg v = (SymbolLlistaArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolArgs(this.parser,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARGS ::= ID LPAREN RPAREN 
            {
              SymbolArgs RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolArgs(this.parser,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LLISTARG ::= ID LPAREN TERME 
            {
              SymbolLlistaArg RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolTerme v1 = (SymbolTerme)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLlistaArg(this.parser,v,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLISTARG",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LLISTARG ::= LLISTARG COMA TERME 
            {
              SymbolLlistaArg RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolLlistaArg v = (SymbolLlistaArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolTerme v1 = (SymbolTerme)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLlistaArg(this.parser,v,v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLISTARG",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
